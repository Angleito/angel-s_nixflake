# Environment variable sanitization function
sanitize_env_vars() {
    local var_name="$1"
    local var_value="$2"
    local var_type="${3:-string}"
    local default_value="${4:-}"
    
    # If variable is empty or unset, use default
    if [[ -z "$var_value" ]]; then
        var_value="$default_value"
    fi
    
    # Skip if still empty after default
    if [[ -z "$var_value" ]]; then
        return 0
    fi
    
    # Sanitize based on type
    case "$var_type" in
        "api_key")
            # Validate API key format and sanitize
            if validate_api_key "$var_value"; then
                # Remove any shell special characters but preserve valid API key chars
                var_value=$(echo "$var_value" | sed 's/[;|&$`(){}\[\]<>"'\'']//g')
                export "$var_name"="$var_value"
                echo "✅ Loaded API key: $var_name" >> ~/.envrc.log
            else
                echo "⚠️  Invalid API key format for $var_name, skipping" >> ~/.envrc.log
            fi
            ;;
        "email")
            # Basic email validation and sanitization
            if [[ "$var_value" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
                # Remove shell special characters
                var_value=$(echo "$var_value" | sed 's/[;|&$`(){}\[\]<>"'\'']//g')
                export "$var_name"="$var_value"
                echo "✅ Loaded email: $var_name" >> ~/.envrc.log
            else
                echo "⚠️  Invalid email format for $var_name, using default" >> ~/.envrc.log
                export "$var_name"="$default_value"
            fi
            ;;
        "string")
            # General string sanitization
            # Remove or escape problematic shell characters
            var_value=$(echo "$var_value" | sed 's/[;|&$`(){}\[\]<>]//g' | sed 's/"/\\"/g' | sed "s/'/\\\'/g")
            export "$var_name"="$var_value"
            echo "✅ Loaded string: $var_name" >> ~/.envrc.log
            ;;
        *)
            echo "⚠️  Unknown variable type '$var_type' for $var_name" >> ~/.envrc.log
            ;;
    esac
}

# API key validation function
validate_api_key() {
    local key="$1"
    
    # Check if key is empty
    if [[ -z "$key" ]]; then
        return 1
    fi
    
    # Check for minimum length (most API keys are at least 16 characters)
    if [[ ${#key} -lt 16 ]]; then
        return 1
    fi
    
    # Check for valid API key patterns
    # Most API keys contain only alphanumeric characters, hyphens, underscores, and dots
    if [[ ! "$key" =~ ^[a-zA-Z0-9._-]+$ ]]; then
        return 1
    fi
    
    # Additional checks for common API key prefixes
    case "$key" in
        tvly-*|sk-*|pk-*|Bearer\ *|pplx-*|jina_*|fc-*|BSA*)
            return 0
            ;;
        *)
            # Generic validation: ensure it looks like a reasonable API key
            if [[ "$key" =~ ^[a-zA-Z0-9._-]{16,}$ ]]; then
                return 0
            else
                return 1
            fi
            ;;
    esac
}

# Safe environment variable loader
load_env_vars() {
    # Clear any existing log
    > ~/.envrc.log
    
    echo "🔧 Loading and sanitizing environment variables..." >> ~/.envrc.log
    
    # Read and sanitize environment variables
    if [[ -f ".env" ]]; then
        # Process each line in .env file
        while IFS='=' read -r key value || [[ -n "$key" ]]; do
            # Skip empty lines and comments
            [[ -z "$key" || "$key" =~ ^[[:space:]]*# ]] && continue
            
            # Remove quotes from value
            value=$(echo "$value" | sed 's/^["'\'']//;s/["'\'']$//')
            
            # Determine variable type and defaults based on name
            case "$key" in
                *API_KEY*)
                    sanitize_env_vars "$key" "$value" "api_key" ""
                    ;;
                *EMAIL*)
                    sanitize_env_vars "$key" "$value" "email" "user@example.com"
                    ;;
                GIT_NAME)
                    sanitize_env_vars "$key" "$value" "string" "Unknown User"
                    ;;
                *)
                    sanitize_env_vars "$key" "$value" "string" ""
                    ;;
            esac
        done < .env
    else
        echo "⚠️  .env file not found, skipping environment variable loading" >> ~/.envrc.log
    fi
    
    echo "✅ Environment variable sanitization complete" >> ~/.envrc.log
}

# Load environment variables with sanitization
load_env_vars

# Load dotenv normally for any remaining variables
dotenv
use flake

